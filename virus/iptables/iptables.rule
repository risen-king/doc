#!/bin/bash

# 请先输入您的相关参数，不要输入错误了！
EXTIF="eth0" # 这个是可以连上 Public IP 的网络接口 
INIF="eth1" # 内部 LAN 的连接接口；若无则写成 INIF="" 
INNET="192.168.100.0/24" # 若无内部网域接口，请填写成 INNET="" 
export EXTIF INIF INNET

###############################################################################
################### 第一部份，针对本机的防火墙设定！               ############
################################################################################ 

# 1. 先设定好核心的网络功能
echo "1" > /proc/sys/net/ipv4/tcp_syncookies 
echo "1" > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts 

for i in /proc/sys/net/ipv4/conf/*/{rp_filter,log_martians}; do 
	echo "1" > $i 
done 

for i in /proc/sys/net/ipv4/conf/*/{accept_source_route,accept_redirects,send_redirects}; do
	echo "0" > $i
done

# 2. 清除规则、设定默认政策及开放 lo 与相关的设定值
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/sbin:/usr/local/bin;
export PATH

# 2.1 清除所有规则
iptables -F;
iptables -X;
iptables -Z;

# 2.2 设定默认 policy. 将本机的 INPUT 设定为 DROP,其他设定为 ACCEPT
iptables -P INPUT DROP
iptables -P OUTPUT ACCEPT
iptables -P FORWARD ACCEPT


# 2.3 设定 lo 成为受信任的装置，亦即进出 lo 的封包都予以接受
iptables -A INPUT -i lo -j ACCEPT

# 2.4 只要已建立或相关封包就予以通过，只要是不合法封包就丢弃
iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -A INPUT -m state --state INVALID 	       -j DROP

# 3. 启动额外的防火墙 script 模块 
if [ -f ./iptables.deny ]; then 
	sh ./iptables.deny 
fi 

if [ -f ./iptables.allow ]; then 
	sh ./iptables.allow 
fi 

if [ -f ./iptables.http ]; then 
	sh ./iptables.http 
fi


# 4. 让 0,3,4,11,12,14,16,18 的 ICMP 封包可以进入本机
icmp_type="0 3 3/4 4 11 12 14 16 18"
for typeicmp in $icmp_type
do
	iptables -A INPUT -i $EXTIF -p icmp --icmp-type $typeicmp -j ACCEPT
done

# 5. 允许某些服务的进入，请依照你自己的环境开启
#iptables -A INPUT -p TCP -i $EXTIF --dport 21 --sport 1024:65534 -j ACCEPT # FTP
iptables -A INPUT -p TCP -i $EXTIF --dport 22 --sport 1024:65534 -j ACCEPT # SSH
iptables -A INPUT -p TCP -i $EXTIF --dport 25 --sport 1024:65534 -j ACCEPT # SMTP
#iptables -A INPUT -p UDP -i $EXTIF --dport 53 --sport 1024:65534 -j ACCEPT # DNS
#iptables -A INPUT -p TCP -i $EXTIF --dport 53 --sport 1024:65534 -j ACCEPT # DNS
iptables -A INPUT -p TCP -i $EXTIF --dport 80 --sport 1024:65534 -j ACCEPT # WWW
iptables -A INPUT -p TCP -i $EXTIF --dport 110 --sport 1024:65534 -j ACCEPT # POP3
#iptables -A INPUT -p TCP -i $EXTIF --dport 443 --sport 1024:65534 -j ACCEPT # HTTPS

# 只要是来自 192.168.100.10 就接受，但 192.168.100.230 这个恶意来源就丢弃
#iptables -A INPUT -i eth1 -s 192.168.100.10 -j ACCEPT
#iptables -A INPUT -i eth1 -s 192.168.100.230 -j DROP

# 只要是来自内网的 (192.168.100.0/24) 的封包通通接受
#iptables -A INPUT -i eth1 -s 192.168.100.0/24 -j ACCEPT

# 对封包进行记录 
#iptables -A INPUT -s 192.168.2.200 -j LOG


# 想连到我这部主机的网芳 (upd port 137,138 tcp port 139,445) 就放行
#iptables -A INPUT -i eth0 -p udp --dport 137:138 -j ACCEPT
#iptables -A INPUT -i eth0 -p tcp --dport 139     -j ACCEPT
#iptables -A INPUT -i eth0 -p tcp --dport 445     -j ACCEPT

# 只要来自 192.168.1.0/24 的 1024:65535 埠口的封包，且想要联机到本机的 ssh port 就予以抵挡
#iptables -A INPUT -i eth0 -p tcp -s 192.168.1.0/24 --sport 1024:65534 --dport ssh -j DROP

# 将来自任何地方来源 port 1:1023 的主动联机到本机端的 1:1023 联机丢弃
#iptables -A INPUT -i eth0 -p tcp --sport 1:1023 --dport 1:1023 --syn -j DROP


# 针对局域网络内的 aa:bb:cc:dd:ee:ff 主机开放其联机
#iptables -A INPUT -m mac --mac-source aa:bb:cc:dd:ee:ff  -j ACCEPT 


####################################################################
# 第二部份，针对后端主机的防火墙设定！###############################
#####################################################################

# 1. 先加载一些有用的模块
modules="ip_tables iptable_nat ip_nat_ftp ip_nat_irc ip_conntrack ip_conntrack_ftp ip_conntrack_irc" 
for mod in $modules 
do 
	testmod=`lsmod | grep "^${mod} " | awk '{print $1}'` 
	if [ "$testmod" == "" ]; then 
		modprobe $mod 
	fi 
done

# 2. 清除 NAT table 的规则吧！
iptables -F -t nat 
iptables -X -t nat 
iptables -Z -t nat 
iptables -t nat -P PREROUTING ACCEPT 
iptables -t nat -P POSTROUTING ACCEPT 
iptables -t nat -P OUTPUT ACCEPT

# 3. 若有内部接口的存在 (双网卡) 开放成为路由器，且为 IP 分享器！
if [ "$INIF" != "" ]; then 
	iptables -A INPUT -i $INIF -j ACCEPT 
	
	# 让  Linux 具有 router 的能力
	echo "1" > /proc/sys/net/ipv4/ip_forward 
	
	if [ "$INNET" != "" ]; then 
		for innet in $INNET 
		do 
			# 加入 nat table 封包伪装
			iptables -t nat -A POSTROUTING -s $innet -o $EXTIF -j MASQUERADE 
		done 
	fi 
fi


# 如果你的 MSN 一直无法联机，或者是某些网站 OK 某些网站不 OK， 
# 可能是 MTU 的问题，那你可以将底下这一行给他取消批注来启动 MTU 限制范围 
# iptables -A FORWARD -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss  --mss 1400:1536 -j TCPMSS --clamp-mss-to-pmtu 


# 4. NAT 服务器后端的 LAN 内对外之服务器设定 
# iptables -t nat -A PREROUTING -p tcp -i $EXTIF --dport 80  -j DNAT --to-destination 192.168.1.210:80 # WWW


# 5. 特殊的功能，包括 Windows 远程桌面所产生的规则，假设桌面主机为 1.2.3.4
iptables -t nat -A PREROUTING -p tcp -s 1.2.3.4 --dport 6000  -j DNAT --to-destination 192.168.100.10 
iptables -t nat -A PREROUTING -p tcp -s 1.2.3.4 --sport 3389  -j DNAT --to-destination 192.168.100.20

# 6. 最终将这些功能储存下来吧！ 
/etc/init.d/iptables save
