# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

#####################################################
###################  通用配置    ####################
#####################################################

# 使用的用户和组
user nginx nginx;

# 指定工作衍生进程数(一般等于cpu的总核数或总核数的2倍),
# 即nginx启动后有多少个worker处理http请求。
# master不处理请求，而是根据相应配置文件信息管理worker进程
worker_processes 8;

# 指定错误日志存放路径，错误日志记录级别可选项为:[debug | info | notice | warn | error | crit ]
error_log /var/log/nginx/error.log  crit;

# 指定 pid 存放路径
pid /var/run/nginx.pid;

# 一个nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文
# 件数（ulimit -n）与nginx 进程数相除，但是nginx 分配请求并不是那么均匀，
# 所以最好与ulimit -n 的值保持一致。
# linux 默认值 open files(#ulimit -n) 和 max user processes(#ulimit –u) 为 1024
# 当作负载较大的服务器时，很容易遇到error: too many open files 。因此，需要将其改大。
#
# 有如下三种修改方式：
# 1. 在/etc/rc.local 中增加一行 ulimit -SHn 65535
# 2. 在/etc/profile 中增加一行 ulimit -SHn 65535
# 3. 在/etc/security/limits.conf 最后增加：
# 		* soft nofile 65535
# 		* hard nofile 65535
# 		* soft nproc  65535
# 		* hard nproc  65535
#
# 具体使用哪种，在 CentOS 中使用第1 种方式无效果，使用第3 种方式有效果，
# 而在Debian 中使用第2 种有效果
worker_rlimit_nofile 65535;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

#####################################################
###################  Events模块  ####################
#####################################################

events {
    # 使用的网络 I/O 模型
    use epoll;
    
	# 每个进程允许的最多连接数,
	# 理论上每台nginx 服务器的最大连接数为worker_processes*worker_connections。
    worker_connections  10240;
	
	# 告诉nginx收到一个新连接通知后接受尽可能多的连接
	multi_accept on;  
}


#####################################################
###################  HTTP 模块   ####################
#####################################################
http {
	#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    #
    #access_log  /var/log/nginx/access.log  main;
	
	
	# 关闭在错误页面中的nginx版本数字，这样对于安全性是有好处的
	server_tokens off; 
	
    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;
  
    #设置客户端能够上传的文件大小
    client_max_body_size 8m;
    
	#####################################################
	#################  网络性能优化   ##################
	#####################################################
	
	# 让sendfile()发挥作用，拷贝是在内核完成的，
	# sendfile()要比组合read()和write()以及打开关闭丢弃缓冲更加有效
    sendfile            on;
    
	# 在一个数据包里发送所有头文件，而不一个接一个的发送
	tcp_nopush          on;
	
	# 禁用nagle算法，也即不缓存数据
    tcp_nodelay         on;
    
	# keepalive 超时时间
    keepalive_timeout   60;
    
    types_hash_max_size 2048;
    
	#####################################################
	#################  fastcgi 配置    ##################
	#####################################################
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;
    
	# 默认情况下，nginx不支持自定义404错误页面，只有这个指令被设置为on，nginx才支持将404错误重定向
    # 在nginx中404错误重定向生效的前提是设置了fastcgi_intercept_errors on,
	# 并且正确的设置了error_page这个选项（包括语法和对应的404页面) 
    fastcgi_intercept_errors on;

    
	#####################################################
	#################  gzip 压缩配置   ##################
	#####################################################
    
	# 告诉nginx采用gzip压缩的形式发送数据
	gzip on;
	
	# 为指定的客户端禁用gzip功能
	gzip_disable "msie6";
	
	# 告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源。
	# 这要求你预先压缩你的文件（在这个例子中被注释掉了），
	# 从而允许你使用最高压缩比，这样nginx就不用再压缩这些文件了
	# gzip_static on;
	
	#对数据启用压缩的最少字节数，如果一个请求小于1000字节，我们最好不要压缩它
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_http_version 1.1;
	
	# 设置数据的压缩等级。这个等级可以是1-9之间的任意数值
    gzip_comp_level 4;
	
	# 设置需要压缩的数据格式
    gzip_types text/plain application/x-javascript text/css application/xml;
    gzip_vary on;
	
	
	#####################################################
	#################   负载均衡       ##################
	#####################################################
	upstream php_server_pool {
		server 192.168.1.10:80 weight=4 max_fails=2 fail_timeout=30s;
		server 192.168.1.11:80 weight=4 max_fails=2 fail_timeout=30s;
		server 192.168.1.12:80 weight=2 max_fails=2 fail_timeout=30s;
	}
	
	upstream message_server_pool {
		server 192.168.1.13:3245;
		server 192.168.1.14:3245 down;
	}
	
	upstream bbs_server_pool {
		server 192.168.1.15:80 weight=1 max_fails=2 fail_timeout=30s;
		server 192.168.1.16:80 weight=1 max_fails=2 fail_timeout=30s;
		server 192.168.1.17:80 weight=1 max_fails=2 fail_timeout=30s;
		server 192.168.1.18:80 weight=1 max_fails=2 fail_timeout=30s;
	}
	
	# 第一个虚拟主机，反向代理 php_server_pool 这组服务器
	server {
		listen 80;
		server_name www.yourdomain.com;
		
		location / {
			proxy_next_upstream http_502 http_504 error timeout invalid_header;
			proxy_pass http://php_server_pool;
			proxy_set_header Host www.yourdomain.com;
			proxy_set_header X-Forwarded-For $remote_addr;
		}
		
		access_log /var/log/nginx/www.yourdomain.com_access.log;
	}
	
	# 第二个虚拟主机 
	server {
		listen 80;
		server_name www1.yourdomain.com;
		
		# 访问 http://www1.yourdomain.com/message/***,反向代理 message_server_pool 这组服务器
		location /message/ {
			proxy_pass http://message_server_pool;
			proxy_set_header Host $host; 
			
		}
		
		# 访问 除了 /message/ 之外 http://www1.yourdomain.com/message/***,反向代理 php_server_pool 这组服务器
		location / {
			proxy_pass http://php_server_pool;
			proxy_set_header Host $host; 
			proxy_set_header X-Forwarded-For $remote_addr;
		}
		
		access_log /var/log/nginx/message.yourdomain.com_access.log;
	}
	
	# 第二个虚拟主机 
	server {
		listen 80;
		server_name bbs.yourdomain.com *.bbs.yourdomain.com;

		location /message/ {
			proxy_pass http://bbs_server_pool;
			proxy_set_header Host $host; 
			
		}
	 
		access_log off;
	}

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;
}
